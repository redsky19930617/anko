import android.content.Context
import android.view.ViewGroup
import android.view.ViewManager
import android.view.View
import android.app.Activity
import android.app.Fragment
import java.util.HashMap

private data class ViewProps(var listeners: HashMap<String, ListenerHelper>, var realTag: Any? = null)

private trait ListenerHelper {
	fun apply()
}

var View.tag: Any?
	get() = {
		val tag = getTag()
		val props = tag as? ViewProps
		if (props!=null) props.realTag else tag
	}
	set(tag) {
		var props = getTag() as? ViewProps
		if (props!=null) {
			props!!.realTag = tag
		} else setTag(tag)
	}

private fun <T: View> addView(v: T, lp: ViewGroup.LayoutParams?, init: T.() -> Unit, manager: ViewManager): T {
	v.init()
	val props = v.getTag() as? ViewProps
	if (props != null) {
		props.listeners.values().forEach { it.apply() }
		v.setTag(props.realTag)
	}
	if (lp!=null) {
		when (manager) {
			is ViewGroup -> manager.addView(v, lp)
			is UiHelper -> manager.addView(v, lp)
			else -> throw RuntimeException("Wrong parent: ${manager.getClass()!!.getName()}")
		}
	} else {
		when (manager) {
			is ViewGroup -> manager.addView(v)
			is UiHelper -> manager.addView(v)
			else -> throw RuntimeException("Wrong parent: ${manager.getClass()!!.getName()}")
		}
	}
	return v
}

private val ViewManager.dslContext: Context
	get() {
		return when(this) {
			is ViewGroup -> this.getContext()!!
			is UiHelper -> this.ctx
			else -> throw RuntimeException("${getClass()!!.getName()} is a wrong parent")
		}
	}

class UiHelper(val ctx: Context, private val setContentView: Boolean = true): ViewManager {
	private var view: View? = null

	fun toView() = view!!
	override fun addView(view: View, params: ViewGroup.LayoutParams) {
		addView(view)
	}

	fun setContentView(): Unit = when (ctx) {
		is Activity -> ctx.setContentView(view)
		else -> {}
	}

	fun addView(view: View) {
		this.view = view
		if (setContentView) {
			when (ctx) {
				is Activity -> ctx.setContentView(view)
				else -> {}
			}
		}
	}
	override fun updateViewLayout(view: View, params: ViewGroup.LayoutParams) {
		throw UnsupportedOperationException()
	}
	override fun removeView(view: View) {
		throw UnsupportedOperationException()
	}
}

fun Context.UI(setContentView: Boolean, init: UiHelper.() -> Unit): UiHelper {
	val dsl = UiHelper(this, setContentView)
	dsl.init()
	return dsl
}

fun Context.UI(init: UiHelper.() -> Unit): UiHelper {
	val dsl = UiHelper(this, false)
	dsl.init()
	return dsl
}

fun Fragment.UI(init: UiHelper.() -> Unit) = getActivity()!!.UI(false, init)